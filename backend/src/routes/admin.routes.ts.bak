// routes/admin.routes.tsimport { Router } from 'express';import { authMiddleware } from '@/middleware/auth.middleware';import { requireRole } from '@/middleware/role.middleware';import { supabaseClient } from '@/config/database.config';import { z } from 'zod';import { validate } from '@/middleware/validation.middleware';const r = Router();r.use(authMiddleware, requireRole('ADMIN'));r.get('/stats', async (_req, res, next) => {  try {    const db = supabaseClient('service');    const tables = ['users','vendors','products','orders','reviews','messages','notifications'];    const counts: Record<string, number> = {};    for (const t of tables) {      const { count, error } = await db.from(t).select('*', { count: 'exact', head: true });      if (error) throw error;      counts[t] = count || 0;    }    res.json({ counts });  } catch (e) { next(e); }});// List users (basic fields)r.get('/users', async (_req, res, next) => {  try {    const db = supabaseClient('service');    const { data, error } = await db.from('users').select('id, email, full_name, role, created_at, updated_at').order('created_at', { ascending: false });    if (error) throw error;    res.json({ items: data || [] });  } catch (e) { next(e); }});// Update user roleconst roleSchema = z.object({ role: z.enum(['ADMIN','VENDOR','CUSTOMER']) });r.patch('/users/:id/role', validate({ body: roleSchema }), async (req, res, next) => {  try {    const db = supabaseClient('service');    const { data, error } = await db.from('users').update({ role: req.body.role }).eq('id', req.params.id).select('id, email, full_name, role').single();    if (error) throw error;    res.json(data);  } catch (e) { next(e); }});// List vendorsr.get('/vendors', async (_req, res, next) => {  try {    const db = supabaseClient('service');    const { data, error } = await db.from('vendors').select('id, user_id, shop_name, slug, status, created_at, updated_at').order('created_at', { ascending: false });    if (error) throw error;    res.json({ items: data || [] });  } catch (e) { next(e); }});// Update vendor statusconst vendorStatusSchema = z.object({ status: z.enum(['PENDING','APPROVED','SUSPENDED']) });r.patch('/vendors/:id/status', validate({ body: vendorStatusSchema }), async (req, res, next) => {  try {    const db = supabaseClient('service');    const { data, error } = await db.from('vendors').update({ status: req.body.status }).eq('id', req.params.id).select('id, status, shop_name').single();    if (error) throw error;    res.json(data);  } catch (e) { next(e); }});export default r;// Categories managementconst catSchema = z.object({ name: z.string().min(2), slug: z.string().min(2) });r.post('/categories', validate({ body: catSchema }), async (req, res, next) => {  try {    const db = supabaseClient('service');    const { data, error } = await db.from('categories').insert({ name: req.body.name, slug: req.body.slug }).select('*').single();    if (error) throw error;    res.status(201).json(data);  } catch (e) { next(e); }});